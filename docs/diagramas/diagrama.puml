@startuml diagrama clases
title TO DO list

interface Builder #Thistle;header:444{
    +setTitulo(titulo: string) ;
    +setDescripcion(descripcion: string) ;
}


class Tarea #TECHNOLOGY;header:444{
    - titulo: string;
    - descripcion: string;
    - fechaVencimiento: date;
    - fechaCreacion: date;
    - prioridad: string;
    - completado: boolean;
    - porcentajeAvance: number;
    - categoria: string;
    - etiqueta: string;
    + setters()
    + getters()
    + agregarTarea(): void;
    + borrarTarea(): void;
}

class ConstructorTarea #TECHNOLOGY;header:444 implements Builder {
    +reset(): void ;
    +setTitulo(titulo: string) ;
    +setDescripcion(descripcion: string) ;
    +setFechaVencimiento(fechaVencimiento: Date) ;
    +setPrioridad(prioridad: prioridad) ;
    +setCategoria(categoria: categoria) ;
    +setEtiqueta(etiqueta: string) ;
    +construirTarea()
}

class Director #TECHNOLOGY;header:444{
    -builder: builder ;
    +constructor()
    +setBuilder(): void ;
    +construirTareaBasica() 
    'este solo pediria el setTitulo y setDescripcion
    +construirTareaCompleta()
    'Este tendria los sets de cada paso
}

enum prioridad #LightSalmon;header:444{
    baja, 
    media,
    alta
}

enum categorias #LightSalmon;header:444{
    trabajo, 
    personal, 
    familia, 
    estudio
}


class ToDoLista #TECHNOLOGY;header:444{
    - listaTareas[]: tarea[] ;
    - listaTareasCompletadas[]: tarea;
    - listaTareasPendientes[]: tarea;
    + agregarTareaALista(): void;
    + getTareaDeLista(): Tarea;
    + getTitulosDeTareas(): string[];
    + borrarTareaDeLista(): void;
    + modificares de parametros()
}

class Busqueda #TECHNOLOGY;header:444{
    + buscarPorTitulo(): tarea;
    + buscarPorFechaVencimiento(): tarea;
    + buscarPorEtiquetas(): tarea;
}

class Ordenamiento #TECHNOLOGY;header:444{
    - listadoOrdenado[]: tarea;
    + ordenarPorTitulo(): void;
    + ordenarPorFecha(): void;
    + ordenarPorPrioridad(): void;
}

class CalculadoraEstadistica #TECHNOLOGY;header:444{
    - TasaFinalizacion: number;
    - numeroTareasCompletadas: number;
    - numeroTareasTotales: number;
    - listadoTiempoDedicadoXtarea[<tarea><tiempo>]: number;
    'esto serviria si hacemos algunas estadisticas que sean algo asi como "promedio de tiempo para resolucion de tareas", o "tiempo dedicado a X categoria / etiqueta", sino yo pondria
    - TiempoDedicadoATareas: number;
    'este simplemente sumaria el tiempo desde la creacion de la tarea hasta ahora. Tambien se puede separar en tiempo dedicado a teareas completadas y tiempo dedicado a tareas no completadas
    + calcularTasa(): number;
    + calcularTiempoDedicado(): number;
}

class Persistencia #TECHNOLOGY;header:444{
    + guardarJSON();
    + leer();
}

exception tareaInexistenteError #LightCoral;header:444{
    + getMessage()
}

'relaciones
skinparam ranksep 100
'cambia el largo de las flechas
skinparam nodesep 100
'cambia la distancia entre los cuadrados
Tarea .u.> ConstructorTarea
Director ..> Builder
prioridad .r.> Tarea::prioridad
categorias .l.> Tarea::categoria
Tarea ..* ToDoLista 
ToDoLista::borrarTareaDeLista <.l. tareaInexistenteError 
ToDoLista .d.> CalculadoraEstadistica
ToDoLista .d.> Busqueda
ToDoLista .d.> Ordenamiento
ToDoLista .d.> Persistencia



'notas

'dise√±o
/'
clase: #TECHNOLOGY;header:444
clase: abstracta #LightCyan;header:444
interfaz: #Thistle;header:444
enums: #LightSalmon;header:444
excepciones: #LightCoral;header:444
'/
skinparam roundcorner 20
'cambia las esquinas de las clases para hacerlas mas redondeadas
skinparam classFontColor automatic
'cambia el color de fuente de todas las clases asi se ve en blanco sobre el fondo oscuro.



@enduml